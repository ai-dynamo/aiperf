# SPDX-FileCopyrightText: Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

from typing import Annotated

import cyclopts
from pydantic import Field

from aiperf.common.config.base_config import BaseConfig
from aiperf.common.config.config_defaults import LoadGeneratorDefaults
from aiperf.common.enums import RequestRateMode


class LoadGeneratorConfig(BaseConfig):
    """
    A configuration class for defining top-level load generator settings.
    """

    concurrency: Annotated[
        int,
        Field(
            ge=1,
            description="The concurrency value to benchmark.",
        ),
        cyclopts.Parameter(
            name=("--concurrency"),
        ),
    ] = LoadGeneratorDefaults.CONCURRENCY

    request_rate: Annotated[
        float | None,
        Field(
            gt=0,
            description="Sets the request rate for the load generated by AIPerf. Unit: requests/second",
        ),
        cyclopts.Parameter(
            name=("--request-rate"),
        ),
    ] = LoadGeneratorDefaults.REQUEST_RATE

    request_rate_mode: Annotated[
        RequestRateMode,
        Field(
            description="Sets the request rate mode for the load generated by AIPerf. Valid values: fixed, dynamic.\n"
            "Fixed: Generate requests at a fixed rate.\n"
            # "Dynamic: Generate requests at a dynamic rate based on the average response times of the previous requests. TBD.",
        ),
        cyclopts.Parameter(
            name=("--request-rate-mode"),
        ),
    ] = LoadGeneratorDefaults.REQUEST_RATE_MODE

    request_count: Annotated[
        int,
        Field(
            ge=1,
            description="The number of requests to use for measurement.",
        ),
        cyclopts.Parameter(
            name=("--request-count", "--num-requests"),
        ),
    ] = LoadGeneratorDefaults.REQUEST_COUNT

    warmup_request_count: Annotated[
        int,
        Field(
            ge=0,
            description="The number of warmup requests to send before benchmarking.",
        ),
        cyclopts.Parameter(
            name=("--warmup-request-count", "--num-warmup-requests"),
        ),
    ] = LoadGeneratorDefaults.WARMUP_REQUEST_COUNT

    # # TODO: Not implemented yet
    # # TODO: Technically this ramp should be considered as a warmup phase, so how to handle this?
    # concurrency_ramp_up_time: Annotated[
    #     float | None,
    #     Field(
    #         gt=0,
    #         description="The time it takes to ramp up the concurrency from 0 to the target concurrency. Unit: seconds",
    #     ),
    #     cyclopts.Parameter(
    #         name=("--concurrency-ramp-up-time"),
    #     ),
    # ] = LoadGeneratorDefaults.CONCURRENCY_RAMP_UP_TIME
