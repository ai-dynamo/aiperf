{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-aiperf-documentation","title":"Welcome to AIPerf Documentation","text":"<p>AIPerf is a package for performance testing of AI models.</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>Explore the documentation using the navigation menu.</li> <li>See the Development page for contributing and setup instructions.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Install dependencies</li> <li>Run the CLI or use the Python API</li> </ol> <p>For more details, see the rest of the documentation.</p>"},{"location":"Development/","title":"Development","text":""},{"location":"Development/#developers-guide","title":"Developers Guide","text":"<p>Execute the following commands to set up your development environment for <code>aiperf</code>. Make sure you are in the root directory of the <code>aiperf</code> repository.</p>"},{"location":"Development/#development-environment","title":"Development Environment","text":"<ul> <li>Install uv https://docs.astral.sh/uv/getting-started/installation/</li> </ul> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <ul> <li>Create virtual env</li> </ul> <pre><code>uv venv\n</code></pre> <ul> <li>Activate venv</li> </ul> <pre><code>source .venv/bin/activate\n</code></pre> <ul> <li>Install <code>aiperf</code> package in editable development mode</li> </ul> <pre><code>uv pip install -e \".[dev]\"\n</code></pre> <ul> <li>Run <code>aiperf</code> in asyncio mode (current default)</li> </ul> <pre><code>aiperf --run-type async\n</code></pre> <p>Press <code>Ctrl-C</code> to stop the process</p> <ul> <li>Run <code>aiperf</code> in multiprocessing mode</li> </ul> <pre><code>aiperf --run-type process\n</code></pre> <p>Press <code>Ctrl-C</code> to stop the process</p> <ul> <li>Run <code>aiperf</code> with <code>--help</code> to see available commands</li> </ul> <pre><code>aiperf --help\n</code></pre>"},{"location":"Development/#code-overview","title":"Code Overview","text":""},{"location":"Development/#project-structure","title":"Project Structure","text":"<pre><code>aiperf/\n\u251c\u2500\u2500 aiperf/              # Main python package\n\u2502   \u251c\u2500\u2500 app/                 # Application components\n\u2502   \u251c\u2500\u2500 cli.py               # Command line interface\n\u2502   \u251c\u2500\u2500 common/              # Shared utilities and models\n\u2502   \u2502   \u251c\u2500\u2500 config/             # Configuration management\n\u2502   \u2502   \u251c\u2500\u2500 enums.py            # Enum definitions\n\u2502   \u2502   \u251c\u2500\u2500 exceptions/         # Custom exceptions\n\u2502   \u2502   \u251c\u2500\u2500 models/             # Pydantic data models\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 messages.py         # Message definitions\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 service.py          # Service related model definitions\n\u2502   \u2502   \u2514\u2500\u2500 service.py          # Base service implementation\n\u2502   \u2514\u2500\u2500 services/            # System services\n\u2502       \u251c\u2500\u2500 dataset_manager/        # Handles dataset operations\n\u2502       \u251c\u2500\u2500 post_processor_manager/ # Processes results\n\u2502       \u251c\u2500\u2500 records_manager/        # Manages test records\n\u2502       \u251c\u2500\u2500 system_controller/      # Controls system operation\n\u2502       \u251c\u2500\u2500 timing_manager/         # Handles timing and credits\n\u2502       \u251c\u2500\u2500 worker/                 # Executes benchmarks\n\u2502       \u2514\u2500\u2500 worker_manager/         # Manages worker processes\n\u251c\u2500\u2500 docs/                # Documentation\n\u251c\u2500\u2500 tests/               # Test suite\n\u251c\u2500\u2500 pyproject.toml       # Project configuration\n\u251c\u2500\u2500 Makefile             # Build and automation scripts\n\u2514\u2500\u2500 README.md            # Project readme\n</code></pre>"},{"location":"Development/#core-components","title":"Core Components","text":"<p>This comes from the AIPerf Design Document</p> <p>AIPerf implements a distributed microservices architecture with the following key components:</p> <ul> <li>System Controller: Primary responsibility is to orchestrate the system. It will ensure all blocks are ready and healthy. It will also help orchestrating graceful shutdowns. This is the component that will contain the methods users can interact with.</li> <li> <p>Dataset Manager: Primary responsibility is to manage the data: generation or acquisition. For  synthetic generation, it contains the code to generate the prompts or tokens. It will have an API for dataset acquisition of a dataset if available in a remote repository or database.</p> </li> <li> <p>Worker Manager: Primary responsibility is to pull data from the dataset manager after receiving the timing credit from the timing manager. It will then push the request data to the worker to issue to the request.</p> </li> <li> <p>Worker: Primarily responsible for converting the data into the appropriate format for the interface being used by the server. Also responsible for managing the conversation between turns.</p> </li> <li> <p>Timing Manager: Primary responsibility is to generate the schedule and issuing timing credits for requests.</p> </li> <li> <p>Records Manager: Primarily responsible for holding the results returned from the workers.</p> </li> <li> <p>Post-Processor Manager: Primarily responsible for iterating over the records to generate metrics and other conclusions from the records.</p> </li> </ul>"},{"location":"Development/#communication-system","title":"Communication System","text":"<p>Services communicate using a message-based system with the following components:</p> <ul> <li>Topics: Categorized channels for message distribution (commands, status, data, etc.)</li> <li>Messages: Strongly-typed data structures for inter-service communication</li> <li>Service States: Lifecycle states that services transition through (initializing, running, stopping, etc.)</li> </ul>"},{"location":"Development/#command-line-interface","title":"Command Line Interface","text":"<p>The CLI (<code>aiperf/cli.py</code>) provides the entry point to the system</p>"},{"location":"Development/#message-processing","title":"Message Processing","text":"<p>To handle messages:</p> <ol> <li>Subscribe to relevant topics using <code>_subscribe_to_topic(Topic)</code></li> <li>Implement message processing logic in <code>_process_message(topic, message)</code></li> <li>Send messages using <code>_publish_message(topic, message)</code></li> </ol>"},{"location":"Development/#service-inheritance-model","title":"Service Inheritance Model","text":"<p>AIPerf uses an inheritance-based architecture where all system services inherit from a common <code>ServiceBase</code> abstract class. This approach provides a consistent interface and shared functionality across services.</p>"},{"location":"Development/#base-service-responsibilities","title":"Base Service Responsibilities","text":"<p>The <code>ServiceBase</code> class (<code>aiperf/common/service.py</code>) provides automatically for all services:</p> <ul> <li>Lifecycle Management: Standard initialize/run/stop/cleanup methods</li> <li>State Transitions: Manages service state changes (INITIALIZING \u2192 RUNNING \u2192 STOPPING \u2192 STOPPED)</li> <li>Communication: Methods for publishing messages and subscribing to topics</li> <li>Heartbeat: Automatic heartbeat generation for service health monitoring</li> </ul>"},{"location":"Development/#service-implementation-requirements","title":"Service Implementation Requirements","text":"<p>When implementing a new service that inherits from <code>ServiceBase</code>, you must:</p> <ol> <li>Implement Abstract Methods:</li> <li><code>_initialize()</code>: Set up service-specific resources</li> <li><code>_on_start()</code>: Main service logic</li> <li><code>_on_stop()</code>: Handle graceful shutdown</li> <li><code>_cleanup()</code>: Release resources</li> <li> <p><code>_process_message()</code>: Handle incoming messages</p> </li> <li> <p>Configuration:</p> </li> <li>Define service-specific configuration needs</li> <li>Pass configuration to the base class constructor</li> </ol>"},{"location":"Development/#example-service-implementation","title":"Example Service Implementation","text":"<p>Here's a simplified example of a service implementation:</p> <pre><code>from aiperf.common.service import ServiceBase\nfrom aiperf.common.config.service_config import ServiceConfig\nfrom aiperf.common.enums import Topic\nfrom aiperf.common.models.messages import BaseMessage\n\nclass ExampleService(ServiceBase):\n    def __init__(self, config: ServiceConfig) -&gt; None:\n        super().__init__(service_type=\"example_service\", config=config)\n        self.my_resource = None\n\n    async def _initialize(self) -&gt; None:\n        \"\"\"Initialize service-specific resources.\"\"\"\n        self.logger.debug(\"Initializing Example Service\")\n        # Subscribe to required topics\n        await self._subscribe_to_topic(Topic.COMMAND)\n        await self._subscribe_to_topic(Topic.DATA)\n        # Initialize resources\n        self.my_resource = SomeResource()\n\n    async def _on_start(self) -&gt; None:\n        \"\"\"Main service logic.\"\"\"\n        self.logger.debug(\"Running Example Service\")\n        # Implement your service's main logic here\n        # This method should typically set up ongoing tasks or loops\n\n    async def _on_stop(self) -&gt; None:\n        \"\"\"Handle graceful shutdown.\"\"\"\n        self.logger.debug(\"Stopping Example Service\")\n        # Cancel any ongoing tasks\n        # Prepare for cleanup\n\n    async def _cleanup(self) -&gt; None:\n        \"\"\"Release resources.\"\"\"\n        self.logger.debug(\"Cleaning up Example Service\")\n        # Release any resources\n        if self.my_resource:\n            await self.my_resource.close()\n\n    async def _process_message(self, topic: Topic, message: BaseMessage) -&gt; None:\n        \"\"\"Handle incoming messages.\"\"\"\n        self.logger.debug(f\"Processing message: {topic}, {message}\")\n        if topic == Topic.COMMAND:\n            # Handle command messages\n            await self._handle_command(message)\n        elif topic == Topic.DATA:\n            # Handle data messages\n            await self._handle_data(message)\n\n    async def _handle_command(self, message: BaseMessage) -&gt; None:\n        \"\"\"Handle command messages.\"\"\"\n        # Implement command handling logic\n\n    async def _handle_data(self, message: BaseMessage) -&gt; None:\n        \"\"\"Handle data messages.\"\"\"\n        # Implement data handling logic\n</code></pre>"},{"location":"Development/#using-the-service","title":"Using the Service","text":"<p>To instantiate and run a service:</p> <pre><code>def main() -&gt; None:\n    from aiperf.common.bootstrap import bootstrap_and_run_service\n\n    bootstrap_and_run_service(ExampleService)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n</code></pre> <p>The <code>bootstrap_and_run_service</code> function handles: 1. Setting up the event loop (using uvloop) 2. Creating an instance of your service 3. Running the service's lifecycle methods 4. Handling graceful shutdown</p> <p>This inheritance model ensures consistent behavior across all services while allowing for service-specific customization.</p>"}]}